%% Unitmatch DT implementation
addpath(genpath('C:\Users\adam.tong\Documents\GitHub\UnitMatch'))
base_folder = 'Z:\ibn-vision\DATA\SUBJECTS\';
mouses = ['M23031';'M23032';'M23034';'M23037';'M23038'];
SESSION = {['20230713';'20230714'];
    ['20230718';'20230719';'20230720';'20230721';'20230722'];
    ['20230804';'20230805';'20230806';'20230807'];
    ['20230810';'20230811';'20230812';'20230813'];
    ['20230816';'20230817']};
%     ['20230816';'20230817']};
% mouses = ['M23032'];
% SESSION = {['20230718']};
for iMouse = 1
    mouse = mouses(iMouse,:);
    dates = SESSION{iMouse};
for iDate = 1:size(dates,1)
    date = dates(iDate,:);
    for no_probe = 1:2
        ephys_folder = fullfile(base_folder,mouse,'ephys',date);

         UMparam.KSDir = {fullfile(ephys_folder,['probe',num2str(no_probe)-1],'sorters','kilosort4','sorter_output')};  % This is a cell array with a path, in the path there should be a subfolder called 'RawWaveforms'.
        % N.B. if you want to use the functional score evaluation of UnitMatch, 'KSDir' should also contain typical 'Kilosort output', (e.g. spike times etc.)
%         UMparam.KSDir = {fullfile('Z:\ibn-vision\DATA\SUBJECTS\M23028\ephys\20230703\kilosort_probe_',num2str(no_probe))};
        UMparam.SaveDir = fullfile(UMparam.KSDir{1},'UnitMatch');
        mkdir(UMparam.SaveDir);
        clusinfo = struct; % Note, this can be kilosort input,
        clusinfo.cluster_id = [];
        clusinfo.Good_ID = [];
        clusinfo.ProbeID = [];
        clusinfo.RecSesID=[];




        %UMparam.SaveDir = fullfile(ephys_folder{iDate},['probe',num2str(no_probe)-1],'unit_match'); % Recommended to use end this path with \Probe0\IMRO_1\ if more probes/IMRO tables were used or \AllProbes\AllIMRO\ otherwise


        %% N.B. the following user input can also be automatically extracted and prepared/cleaned up using UMparam = ExtractKilosortData(KiloSortPaths, UMparam) for Kilosorted data of SpikeGLX recorded data (see next section);
        %UMparam.RawDataPaths = {'\\path\to\firstrecording','\\path\to\secondrecording','\\path\to\nthrecording'};  % This is a cell array with info on where to find the compressed recording (.cbin files OR .bin files)
        UMparam.AllRawPaths ={fullfile(ephys_folder,['probe',num2str(no_probe)-1,'preprocessed'])};
        UMparam.AllDecompPaths= {fullfile(ephys_folder,['probe',num2str(no_probe)-1,'preprocessed'])};  % This is a cell array with info on where to find the decompressed recording (.bin files) --> Necessary when you want UnitMatch to do waveform extraction

         UMparam.AllChannelPos = {readNPY(fullfile(ephys_folder,['probe',num2str(no_probe)-1],'sorters\kilosort4\sorter_output\channel_positions.npy'))}; % These are coordinates of every recording channel on the probe (e.g. nRecordingChannels x 2)
%         UMparam.AllChannelPos = {readNPY(fullfile(ephys_folder,['kilosort_probe_',num2str(no_probe)-1],'channel_positions.npy'))};

        %% convert spikeinterface waveforms to unit match version in kilosort folder

        % Specify the file path
         ks3_sparsity_path = fullfile(ephys_folder,['probe',num2str(no_probe)-1],'waveform\kilosort4\sparsity.json');
         ks3_waveform_path = fullfile(ephys_folder,['probe',num2str(no_probe)-1],'waveform\kilosort4\waveforms\');

        ks3_raw_waveform_path =fullfile(UMparam.KSDir,'RawWaveforms');
        mkdir(ks3_raw_waveform_path{1});
        % Load the JSON file
        fileID = fopen(ks3_sparsity_path);
        rawData = fread(fileID, inf);
        strData = char(rawData');
        fclose(fileID);
        no_channels = size(UMparam.AllChannelPos{1},1);
        ks3_sparsity = jsondecode(strData);

        unit_ids = ks3_sparsity.unit_ids;

        for iUnit = 1:length(unit_ids)
            waveform_channels = ks3_sparsity.unit_id_to_channel_ids.(['x',num2str(unit_ids(iUnit))]);
            % Assume 'cellArray' is your cell array


            % Initialize an empty matrix of the same size as the cell array
            waveform_channel_ids = zeros(size(waveform_channels));

            % Loop over the cell array
            for i = 1:numel(waveform_channels)
                % Extract the number from the string using regexp

                temp_channel_indices = strcmp(ks3_sparsity.channel_ids,waveform_channels{i});
                waveform_channel_ids(i) = find(temp_channel_indices ==1);
            end
            unit_waveform_path = fullfile(ks3_waveform_path,['waveforms_',num2str(unit_ids(iUnit)),'.npy']);
            unit_waveform = readNPY(unit_waveform_path);
            unit_waveform = permute(unit_waveform,[2 3 1]);
            spikeMap = zeros(size(unit_waveform,1),no_channels,size(unit_waveform,3));

            spikeMap(:,waveform_channel_ids,:) = unit_waveform;
            spikeMapAvg = zeros(size(unit_waveform,1),no_channels,2);
            nwavs = size(spikeMap,3);
            for cv = 1:2
                if cv==1
                    wavidx = floor(1:nwavs/2);
                else
                    wavidx = floor(nwavs/2+1:nwavs);
                end
                spikeMapAvg(:,:,cv) = nanmedian(spikeMap(:,:,wavidx),3);
            end
            spikeMap = spikeMapAvg;

            %fetch the waveforms of the unit
            writeNPY(spikeMap, [UMparam.KSDir{1},'\RawWaveforms\','Unit',num2str(unit_ids(iUnit)),'_RawSpikes.npy']);
        end
        


        clusinfo.cluster_id = unit_ids;
        clusinfo.Good_ID = zeros(size(unit_ids));
        clusinfo.ProbeID = ones(size(unit_ids)).*no_probe;
        clusinfo.RecSesID = ones(size(unit_ids));
        UMparam = DefaultParametersUnitMatch(UMparam);
        UMparam.GoodUnitsOnly = 0;
        UMparam.spikeWidth = 105;
        % Params = struct;
        % Params = DefaultParametersExtractKSData(Params,UMparam.KSDir{1});
        % Params.DecompressLocal = 0; Params.RunQualityMetrics = 0;
%         ExtractKilosortData(UMparam.KSDir, Params)
        % sp = loadKSdir(fullfile(UMparam.KSDir{1}), Params); % Load Spikes with PCs
        %     [sp.spikeAmps, sp.spikeDepths, sp.templateDepths, sp.templateXpos, sp.tempAmps, sp.tempsUnW, sp.templateDuration, sp.waveforms] = ...
        %         templatePositionsAmplitudes(sp.temps, sp.winv, sp.ycoords, sp.xcoords, sp.spikeTemplates, sp.tempScalingAmps);
        %     save(fullfile(UMparam.KSDir{1}, 'PreparedData.mat'), 'clusinfo', 'Params', '-v7.3')
        %     save(fullfile(UMparam.KSDir{1}, 'PreparedData.mat'), 'sp', '-append')
        %%
        [UniqueIDConversion, MatchTable, WaveformInfo, UMparam] = UnitMatch(clusinfo, UMparam);
        if UMparam.AssignUniqueID
            AssignUniqueID(UMparam.SaveDir);
        end
        MatchTable.ID1 = MatchTable.ID1+1;
        MatchTable.ID2 = MatchTable.ID2+1;
        unit_id = unique(MatchTable.ID1);
        MatchProb = reshape(MatchTable.MatchProb,[length(unit_id) length(unit_id)]);
        upperTri = triu(MatchProb, 1);
        lowerTri = tril(MatchProb, -1);
        a= lowerTri';
        avgMatrix = (upperTri + lowerTri') / 2;
        self_match_prob = spdiags(MatchProb,0);
        unstable_id = self_match_prob < 0.5;
        merged_id = unit_id; %pre-allocate the unit id to the merged id
        channel_map = readNPY([UMparam.KSDir{1},'\channel_map.npy']);
        channel_positions = readNPY([UMparam.KSDir{1},'\channel_positions.npy']);
        avg_channel = WaveformInfo.MaxChannel(:,2); %max channel in waveforminfo is finding the max index of the waveform so it's a direct index, not channel id
        avg_channel_no_nan = ~isnan(avg_channel);
        unit_peak_depths = nan(size(avg_channel));
        unit_peak_depths(avg_channel_no_nan) = channel_positions(avg_channel(avg_channel_no_nan),2);
        for id_count = 1:length(unit_id)
            id = unit_id(id_count);

            match_id = avgMatrix(id_count,:) >= 0.85;
            if ~isnan(unit_peak_depths(id_count))
            nearby_id = unit_peak_depths <= unit_peak_depths+200 & unit_peak_depths -200;
            else
                nearby_id = false(size)

            if sum(match_id) > 0 
                if merged_id(id_count) == id
                    merged_id(match_id) = id;
                else
                    merged_id(match_id) = merged_id(id_count);
                end
            end

        end
        original_id = unit_id;
        savepath = fullfile(base_folder,mouse,'analysis',date,['probe',num2str(no_probe)-1,'um_merge_suggestion.mat']);
        match_ids =[original_id,merged_id,unstable_id];
        save(savepath,'match_ids');
    end
end
end



